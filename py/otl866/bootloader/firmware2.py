import binascii
from collections import namedtuple
from intelhex import IntelHex
import struct


KEY = bytes([
    0xD1, 0xDE, 0x58, 0x05, 0x86, 0xF9, 0xFC, 0xC4, 0xA7, 0xAA, 0x5F, 0xDF,
    0xC9, 0x48, 0x09, 0x2C, 0x3F, 0xF2, 0x30, 0xC9, 0x92, 0x1D, 0xE3, 0x5F,
    0x40, 0x47, 0x52, 0xD1, 0xB5, 0xF9, 0x33, 0xCC, 0x9A, 0x01, 0x4B, 0xF0,
    0xE8, 0x6D, 0xA1, 0xDA, 0xE3, 0x08, 0x63, 0xD3, 0x37, 0x18, 0x1D, 0x97,
    0xFC, 0x54, 0xA5, 0xC4, 0x8A, 0x66, 0xF0, 0xB4, 0xA3, 0x65, 0xDB, 0xCA,
    0xE4, 0x8D, 0x72, 0x5C, 0x22, 0x83, 0xF9, 0x4D, 0x4C, 0x8B, 0xDC, 0x61,
    0x64, 0x47, 0x97, 0x23, 0xC5, 0xAE, 0xF5, 0x3A, 0x25, 0x94, 0xB2, 0x4F,
    0xC0, 0x94, 0x77, 0x14, 0x69, 0xDF, 0x91, 0xBE, 0x07, 0xA3, 0x89, 0x84,
    0xC1, 0xDC, 0xFA, 0x11, 0xEA, 0x49, 0xED, 0x4A, 0xE3, 0x1A, 0xDC, 0xC6,
    0x14, 0x45, 0x29, 0x55, 0x89, 0x2B, 0x4D, 0x18, 0x95, 0x20, 0x58, 0xB9,
    0xAF, 0xAA, 0x14, 0xE5, 0x37, 0x75, 0xB0, 0x3C, 0x10, 0x0B, 0x2E, 0xF3,
    0x53, 0xDE, 0xB4, 0x95, 0x70, 0xBE, 0x8B, 0x7B, 0xD3, 0x11, 0x61, 0x58,
    0x90, 0xCC, 0x37, 0xA1, 0x28, 0x80, 0x63, 0xD4, 0x1F, 0xC4, 0xCC, 0xB3,
    0xAC, 0xB9, 0x87, 0x3F, 0x4E, 0x00, 0x7C, 0xAA, 0x5E, 0xC6, 0xC0, 0x72,
    0x59, 0xAA, 0x8A, 0xB3, 0xAB, 0xCA, 0xB5, 0x42, 0xAB, 0xF7, 0x88, 0x5B,
    0x89, 0xAF, 0x28, 0xA4, 0xD1, 0xA0, 0xF0, 0x63, 0x7D, 0x66, 0x56, 0xFF,
    0xE4, 0x7B, 0xC6, 0x35, 0x74, 0xB6, 0x7B, 0x20, 0x19, 0xD6, 0x4A, 0x66,
    0xAB, 0xAD, 0x8D, 0xC9, 0xB2, 0x1D, 0x08, 0x7E, 0xE9, 0x61, 0xE6, 0xDF,
    0x94, 0xFB, 0x2A, 0x2B, 0x5A, 0xF9, 0x9D, 0xB6, 0xC9, 0x6D, 0x9B, 0x02,
    0x74, 0x29, 0x9C, 0x55, 0x6D, 0x7B, 0xA3, 0x93, 0x74, 0xAD, 0x21, 0xE3,
    0x1B, 0xB9, 0x28, 0xC9, 0xA2, 0x99, 0xA7, 0x3B, 0x00, 0xC7, 0xA8, 0x85,
    0x54, 0xE4, 0x94, 0xA1, 0xED, 0xD1, 0x22, 0x53, 0xF7, 0x90, 0x22, 0xC7,
    0xFF, 0x0C, 0x95, 0xA8, 0xED, 0xC3, 0x99, 0x09, 0x41, 0x43, 0xC5, 0x6A,
    0xCD, 0x70, 0x41, 0x31, 0x4E, 0x3F, 0xEC, 0x66, 0x42, 0xA5, 0x6B, 0x70,
    0x09, 0x1F, 0xF5, 0x98, 0x14, 0xAD, 0x87, 0x2F, 0x6F, 0x49, 0x00, 0xA7,
    0xF6, 0x29, 0xAC, 0x72, 0x19, 0xB3, 0x62, 0xE3, 0x90, 0x80, 0xA6, 0x39,
    0x7D, 0x5B, 0x5C, 0x8D, 0x3D, 0x2C, 0xC9, 0xE2, 0x34, 0x8C, 0x72, 0x8F,
    0x9B, 0xAE, 0xA1, 0x85, 0xD4, 0xA2, 0xDC, 0x41, 0x60, 0xD2, 0xC4, 0x58,
    0x05, 0x3E, 0xD6, 0x25, 0x1A, 0xB4, 0x34, 0x4B, 0x4E, 0xD3, 0xD2, 0xA8,
    0x44, 0x78, 0xA0, 0xAD, 0xCF, 0x17, 0x0A, 0x2B, 0xFD, 0x93, 0xE2, 0x40,
    0x06, 0xD4, 0x61, 0x6E, 0xD2, 0xBF, 0xF8, 0xF5, 0x6D, 0x23, 0x19, 0xE8,
    0x3F, 0xA5, 0xED, 0x1E, 0xD0, 0x5C, 0xDC, 0xB9, 0x37, 0x41, 0x0F, 0xC7,
    0x31, 0xF0, 0x76, 0x27, 0xF2, 0x4E, 0xB8, 0xDA, 0x1E, 0x16, 0x26, 0xAA,
    0xE5, 0xDE, 0x77, 0xBA, 0x48, 0x92, 0xFB, 0xE8, 0x08, 0x6D, 0x07, 0x6C,
    0x54, 0x32, 0x33, 0x31, 0x2F, 0x3B, 0x3D, 0xA9, 0xC3, 0xD4, 0xDC, 0x78,
    0xC9, 0x1D, 0xE4, 0x0D, 0x94, 0xE0, 0x8D, 0xED, 0x58, 0x2E, 0x5B, 0xA7,
    0x46, 0x88, 0x6B, 0x1C, 0x45, 0x5F, 0x13, 0xEF, 0xF1, 0x0F, 0xEF, 0x08,
    0x3B, 0xDF, 0x23, 0x8B, 0x9C, 0x3D, 0xFD, 0x9A, 0xF2, 0xB3, 0x8E, 0x8A,
    0x5E, 0x2B, 0xD5, 0xEA, 0x24, 0xE7, 0x52, 0x6C, 0x20, 0xFC, 0x43, 0xFA,
    0xD1, 0x14, 0xF9, 0xD8, 0xDF, 0x65, 0xC8, 0x3A, 0x0C, 0x24, 0x4A, 0xA5,
    0xC5, 0x9A, 0x49, 0x45, 0x4D, 0x49, 0x57, 0x91, 0x76, 0x2A, 0x15, 0x9E,
    0x00, 0x3A, 0x76, 0x09, 0x2D, 0xE7, 0x9A, 0x7C, 0xFB, 0xC8, 0x09, 0x27,
    0xBF, 0xEF, 0x36, 0x3F, 0xF8, 0x86, 0xFF, 0xFF
])


class Update2File():
    SIGNATURE = 0xF8CC

    HEADER_FORMAT = struct.Struct('BBH 4x 1024s I')
    HEADER_SIZE = HEADER_FORMAT.size

    BLOCK_FORMAT = struct.Struct('4I 256s')
    BLOCK_SIZE = BLOCK_FORMAT.size
    Block = namedtuple('Block', [
        'crc32',
        'address_key_offset',
        'address',
        'data_key_offset',
        'data',
    ])

    FOOTER_FORMAT = struct.Struct('4I 2048s')
    FOOTER_SIZE = FOOTER_FORMAT.size

    def __init__(self, source):
        self.raw = bytes(source)

        (
            self.version_minor,
            version_high,
            self.signature,
            self.address_key,
            self.block_count
        ) = self.HEADER_FORMAT.unpack(self.raw[:self.HEADER_SIZE])

        self.version_major = version_high & 0x0F
        self.version_hardware = version_high >> 4

        if self.signature != self.SIGNATURE:
            raise ValueError(
                "incorrect file signature: expected %04x, got %04x"
                % (self.SIGNATURE, self.signature)
            )

    @property
    def version(self):
        return ('%02d.%d.%02d' % (
            self.version_hardware,
            self.version_major,
            self.version_minor,
        ))

    def _read_block(self, offset, fmt, address_key_length):
        block = self.Block._make(fmt.unpack(
            self.raw[offset:offset + fmt.size]
        ))

        # decrypt the address field
        address = block.address
        key_offset = block.address_key_offset
        for key_offset in range(key_offset, key_offset + address_key_length):
            address ^= self.address_key[key_offset % 1024]
        block = block._replace(address = address)

        # verify the block checksum
        actual = binascii.crc32(fmt.pack(*block)[4:], ~0)
        expected = block.crc32 ^ 0xffffffff
        if actual != expected:
            raise RuntimeError(
                "block CRC mismatch: expected %08x, got %08x"
                % (expected, actual)
            )

        return block

    def read_block(self, block_idx):
        if block_idx < 0 or block_idx >= self.block_count:
            raise IndexError("invalid block index")

        return self._read_block(
            offset = self.HEADER_SIZE + self.BLOCK_SIZE * block_idx,
            fmt = self.BLOCK_FORMAT,
            address_key_length = 44 * 6,
        )

    def read_footer(self):
        return self._read_block(
            offset = self.HEADER_SIZE + self.BLOCK_SIZE * self.block_count,
            fmt = self.FOOTER_FORMAT,
            address_key_length = 514 * 4,
        )

    @property
    def blocks(self):
        for idx in range(0, self.block_count):
            yield self.read_block(idx)

        yield self.read_footer()

    @property
    def firmware_clear(self):
        clear = IntelHex()

        for block in self.blocks:
            clear.frombytes(
                [
                    block.data[idx]
                    ^ KEY[(block.data_key_offset * 2 + idx) % 512]
                    for idx in range(0,len(block.data))
                ],
                block.address
            )

        return clear
